PROGRAM MovingAverage
    VAR
        samples: ARRAY[1..100] OF REAL; (* Buffer for 100 samples *)
        sum: REAL := 0.0;
        average: REAL := 0.0;
        newSample: REAL := 0.0; (* Input sample *)
        index: INT := 100; (* Tracks current sample position *)
        firstUpdate: BOOL := TRUE;
    END_VAR
END_PROGRAM

FUNCTION_BLOCK UpdateMovingAverage
    VAR_INPUT
        newSample: REAL; (* New sample input *)
    END_VAR
    VAR_OUTPUT
        average: REAL; (* Computed average output *)
    END_VAR
    VAR
        oldSample: REAL;
    END_VAR
BEGIN
    (* Initialize buffer on the first cycle *)
    IF firstUpdate THEN
        FOR index := 1 TO 100 DO
            samples[index] := 0.0;
        END_FOR;
        firstUpdate := FALSE;
    END_IF;

    (* Remove the oldest sample from the sum *)
    oldSample := samples[100];
    sum := sum - oldSample;

    (* Shift one sample per cycle *)
    FOR index := 100 TO 2 BY -1 DO
        samples[index] := samples[index - 1];
    END_FOR;

    (* Insert new sample at position 1 *)
    samples[1] := newSample;
    sum := sum + newSample;

    (* Compute the average *)
    average := sum / 100.0;
END_FUNCTION_BLOCK
